(ns getwelldoc.core
  (:gen-class)
  (:require [getwelldoc.config :as config]
            [getwelldoc.utils :as utils]
            [getwelldoc.database.core :as dbcore]
            [getwelldoc.mimerefs :as mref :refer [str->ref realize-refstr]]
            [clojure.pprint :as pp]
            [environ.core :refer [env]]))

(def app-state (atom {}))

(defn -main [& args]
  (time
    (do
      (println (format "===================================\nTao2 Version : %s\n===================================\n" (utils/tao2-version)))
      (config/load-config!)
      (println "tao2-cfg:")
      (pp/pprint @config/tao2-cfg)
      (println "source revs: ")
      (pp/pprint (dbcore/get-data-source-revs))
      (println "config: ")
      (config/set-db-connections (dbcore/get-data-source-revs))
      (pp/pprint @config/tao2-cfg)
      (println "datasources: ")
      (swap! app-state assoc :dsn (config/get-data-sources @config/tao2-cfg))
      (pp/pprint (:dsn @app-state))
      (println "All wells: ")
      (println "dsn: " (first (keys (:dsn @app-state))))
      (swap! app-state assoc :all-well (->> (dbcore/get-matching-wells (first (keys (:dsn @app-state))) {:select-set #{:field :lease :well :cmpl}
                                                                                                         :where-map {}})
                                            (vec)
                                            (map vec)
                                            (map #(zipmap [:field :lease :well :cmpl] %))))
      (swap! app-state assoc :current-well (first (:all-well @app-state)))
      (pp/pprint (:all-well @app-state))
      (println "Pick a well: ")
      (pp/pprint (:current-well @app-state))
      (swap! app-state assoc :welldoc (dbcore/get-well {:dsn :pioneer
                                                        :field (:field (:current-well @app-state))
                                                        :lease (:lease (:current-well @app-state))
                                                        :well (:well (:current-well @app-state))
                                                        :cmpl (:cmpl (:current-well @app-state))}))
      (pp/pprint @app-state)
      (println "Get :well-mstr-map")
      (swap! app-state assoc-in [:welldoc :well-mstr-map] (realize-refstr (:well-mstr-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :modl-ctrl-map")
      (swap! app-state assoc-in [:welldoc :modl-ctrl-map] (realize-refstr (:modl-ctrl-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :lgas-props-map")
      (swap! app-state assoc-in [:welldoc :lgas-props-map] (realize-refstr (:lgas-props-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :rsvr-map")
      (swap! app-state assoc-in [:welldoc :rsvr-map] (realize-refstr (:rsvr-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :dsvy-map")
      (swap! app-state assoc-in [:welldoc :dsvy-map] (realize-refstr (:dsvy-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :flow-line-map")
      (swap! app-state assoc-in [:welldoc :flow-line-map] (realize-refstr (:flow-line-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :inj-mech-map")
      (swap! app-state assoc-in [:welldoc :inj-mech-map] (realize-refstr (:inj-mech-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :prod-mech-map")
      (swap! app-state assoc-in [:welldoc :prod-mech-map] (realize-refstr (:prod-mech-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :welltest-map")
      (swap! app-state assoc-in [:welldoc :welltest-map] (realize-refstr (:welltest-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :flowing-gradient-survey-map")
      (swap! app-state assoc-in [:welldoc :flowing-gradient-survey-map] (realize-refstr (:flowing-gradient-survey-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      ;(println "Get :static-survey")
      ;(swap! app-state assoc-in [:welldoc :static-survey] (realize-refstr (:static-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state)))))
      ;(println "Get :buildup-survey")
      ;(swap! app-state assoc-in [:welldoc :buildup-survey] (realize-refstr (:buildup-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :reservoir-survey")
      (swap! app-state assoc-in [:welldoc :reservoir-survey] (realize-refstr (:reservoir-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      ;(println "Get :pvt-sample-map")
      ;(swap! app-state assoc-in [:welldoc :pvt-sample-map] (realize-refstr (:pvt-sample-map (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :scada-survey")
      (swap! app-state assoc-in [:welldoc :scada-survey] (realize-refstr (:scada-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      (println "Get :mandrel-survey-map")
      (swap! app-state assoc-in [:welldoc :mandrel-survey-map] (realize-refstr (:mandrel-survey-map (:welldoc @app-state)))))))
      ;(pp/pprint (:welldoc @app-state))
      ;(println "Get :welltracer-survey")
      ;(swap! app-state assoc-in [:welldoc :welltracer-survey] (realize-refstr (:welltracer-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state))
      ;(println "Get :welltracer-survey")
      ;(swap! app-state assoc-in [:welldoc :welltracer-survey] (realize-refstr (:welltracer-survey (:welldoc @app-state))))
      ;(pp/pprint (:welldoc @app-state)))))



